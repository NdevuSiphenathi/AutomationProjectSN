name: SSIS and Agent Job Deployment

on:
  workflow_call:

jobs:
  deploy-ssis-project:
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Directory Contents
        shell: powershell
        run: |
          Write-Host "Listing current directory contents:"
          Get-ChildItem -Recurse

      - name: Create SSIS Catalog
        shell: powershell
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          Write-Host "Checking and creating SSIS Catalog..."
          $createCatalogSql = @"
          IF NOT EXISTS (SELECT name FROM master.sys.databases WHERE name = 'SSISDB')
          BEGIN
              CREATE DATABASE SSISDB;
              ALTER AUTHORIZATION ON DATABASE::SSISDB TO [sa];
              EXEC SSISDB.catalog.create_catalog;
          END
          "@
          $sqlFile = ".\create_ssisdb.sql"
          $createCatalogSql | Out-File -FilePath $sqlFile -Encoding UTF8
          $cmd = "sqlcmd -S `"$env:DB_SERVER`" -U `"$env:DB_USER`" -P `"$env:DB_PASSWORD`" -i `"$sqlFile`" -o .\ssisdb_create.log"
          Invoke-Expression $cmd
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to create SSIS Catalog. Check ssisdb_create.log"
            Get-Content .\ssisdb_create.log | Write-Error
            exit 1
          }
          Write-Host "SSIS Catalog creation/check completed."
          Get-Content .\ssisdb_create.log | Write-Host

      - name: Deploy SSIS Project (.ispac)
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
        shell: powershell
        run: |
          Write-Host "Starting SSIS project deployment..."

          $ispacPath = "ProjectPackages\ProjectPackages\bin\Development\ProjectPackages.ispac"
          $wizardPath = "C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"
          $stdoutLog = ".\ssisdeploy_output.log"
          $stderrLog = ".\ssisdeploy_error.log"
          $connectLog = ".\ssisconnect_test.log"

          Write-Host "Validating ISPAC file path: $ispacPath"
          if (-not (Test-Path $ispacPath)) {
            Write-Error "ISPAC file not found at: $ispacPath"
            exit 1
          }

          Write-Host "Validating ISDeploymentWizard.exe path: $wizardPath"
          if (-not (Test-Path $wizardPath)) {
            Write-Error "ISDeploymentWizard.exe not found at: $wizardPath"
            exit 1
          }

          # Test SQL Server connectivity (optional, using Integrated Auth)
          Write-Host "Testing Integrated Authentication connectivity..."
          try {
            $sqlcmd = "sqlcmd -S `"$env:DB_SERVER`" -E -Q `"SELECT @@VERSION`" -o $connectLog"
            Invoke-Expression $sqlcmd
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Integrated Authentication connectivity test succeeded."
              Get-Content $connectLog | Write-Host
            } else {
              Write-Warning "Integrated Authentication connectivity test failed."
              Get-Content $connectLog | Write-Warning
              exit 1
            }
          } catch {
            Write-Error "Error testing Integrated Authentication: $_"
            exit 1
          }

          function Deploy-SSISProject {
            param (
              [string[]]$Arguments
            )

            Write-Host "Running ISDeploymentWizard with arguments:"
            foreach ($arg in $Arguments) {
              Write-Host "`t$arg"
            }

            $process = Start-Process -FilePath $wizardPath -ArgumentList $Arguments -Wait -NoNewWindow -PassThru -RedirectStandardOutput $stdoutLog -RedirectStandardError $stderrLog
            $exitCode = $process.ExitCode

            Write-Host "===== STDOUT ====="
            if (Test-Path $stdoutLog) {
              Get-Content $stdoutLog | Write-Host
            } else {
              Write-Host "<No stdout log found>"
            }

            Write-Host "===== STDERR ====="
            if (Test-Path $stderrLog) {
              Get-Content $stderrLog | Write-Host
            } else {
              Write-Host "<No stderr log found>"
            }

            return $exitCode
          }

          $intAuthArgs = @(
            "/S+",                              # Silent mode enabled
            "/SP:`"$ispacPath`"",              # SourcePath
            "/DS:`"$env:DB_SERVER`"",          # DestinationServer
            "/DP:`"/SSISDB/TimesheetDeployedPackages/ProjectPackages`""  # DestinationPath
          )

          $exitCode = Deploy-SSISProject -Arguments $intAuthArgs

          if ($exitCode -ne 0) {
            Write-Error "Deployment failed with exit code $exitCode."
            exit $exitCode
          }

          # Verify deployment
          Write-Host "Verifying deployment in catalog..."
          $verifySql = "SELECT * FROM SSISDB.catalog.projects WHERE folder_name = 'TimesheetDeployedPackages' AND name = 'ProjectPackages'"
          $verifyCmd = "sqlcmd -S `"$env:DB_SERVER`" -E -Q `"$verifySql`" -o .\deployment_verify.log"  # Using -E for Integrated Auth
          Invoke-Expression $verifyCmd
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Deployment verification succeeded. Check deployment_verify.log"
            Get-Content .\deployment_verify.log | Write-Host
          } else {
            Write-Warning "Deployment verification failed. Check deployment_verify.log"
            Get-Content .\deployment_verify.log | Write-Warning
          }

          Write-Host "SSIS project deployed successfully."
          exit 0

  deploy-sql-agent-jobs:
    needs: deploy-ssis-project
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy SQL Server Agent Jobs
        shell: powershell
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          Write-Host "Starting SQL Server Agent jobs deployment..."
          $startDate = (Get-Date).ToString("yyyyMMdd") # e.g., 20250620
          $startTime = (Get-Date).ToString("HHmmss")   # e.g., 095300 for 09:53 AM

          $packages = Invoke-Sqlcmd -ServerInstance $env:DB_SERVER -Username $env:DB_USER -Password $env:DB_PASSWORD -Query "SELECT name FROM SSISDB.catalog.packages WHERE project_id IN (SELECT project_id FROM SSISDB.catalog.folders WHERE name = 'TimesheetDeployedPackages') AND name NOT IN ('TimesheetPa', 'TimesheetStaging1')" -OutputAs DataRows | ForEach-Object { $_.name }

          foreach ($pkg in $packages) {
            $jobName = "RunSSIS_$pkg"
            $scheduleName = "Every1Min_$pkg"

            $jobScript = @"
            USE msdb;

            IF EXISTS (SELECT * FROM msdb.dbo.sysjobs WHERE name = '$jobName')
            BEGIN
              EXEC msdb.dbo.sp_delete_job @job_name = '$jobName';
            END;

            EXEC msdb.dbo.sp_add_job
              @job_name = '$jobName',
              @enabled = 1,
              @owner_login_name = '$env:DB_USER';

            EXEC msdb.dbo.sp_add_jobstep
              @job_name = '$jobName',
              @step_name = 'Run SSIS Package',
              @subsystem = 'SSIS',
              @command = '/ISSERVER \""SSISDB\TimesheetDeployedPackages\ProjectPackages\$pkg.dtsx"" /SERVER ""$env:DB_SERVER""',
              @on_success_action = 1,
              @database_name = 'SSISDB';

            DECLARE @schedule_id INT;
            EXEC msdb.dbo.sp_add_schedule
              @schedule_name = '$scheduleName',
              @enabled = 1,
              @freq_type = 4, -- Daily
              @freq_interval = 1, -- Every day
              @freq_subday_type = 4, -- Minutes
              @freq_subday_interval = 1, -- Every 1 minute (closest to 30 seconds due to SQL Server Agent limitation)
              @active_start_date = $startDate,
              @active_start_time = $startTime,
              @schedule_id = @schedule_id OUTPUT;

            EXEC msdb.dbo.sp_attach_schedule
              @job_name = '$jobName',
              @schedule_name = '$scheduleName';

            EXEC msdb.dbo.sp_add_jobserver
              @job_name = '$jobName';
            "@

            try {
              Invoke-Sqlcmd -ServerInstance $env:DB_SERVER -Username $env:DB_USER -Password $env:DB_PASSWORD -Query $jobScript -ErrorAction Stop
              Write-Host "Created job $jobName to run every 1 minute starting at $startTime on $startDate for package: $pkg"
            } catch {
              Write-Error "Failed to create job for package $pkg: $($_.Exception.Message)"
              exit 1
            }
          }

          Write-Host "All SQL Server Agent jobs deployed with 1-minute schedule."
