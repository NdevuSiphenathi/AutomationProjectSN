name: SSIS and Agent Job Deployment

on:
  workflow_call:

jobs:
  deploy-ssis-project:
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy SSIS Project (.ispac)
        shell: powershell
        run: |
          Write-Host "Starting SSIS project deployment..."

          $ispacPath = "ProjectPackages\ProjectPackages\bin\Development\ProjectPackages.ispac"
          $wizardPath = "C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"
          $stdoutLog = ".\ssisdeploy_output.log"
          $stderrLog = ".\ssisdeploy_error.log"

          if (-not (Test-Path $ispacPath)) {
              Write-Error "ISPAC file not found at: $ispacPath"
              exit 1
          }

          if (-not (Test-Path $wizardPath)) {
              Write-Error "ISDeploymentWizard.exe not found at: $wizardPath"
              exit 1
          }

          Write-Host "Deploying with Windows Auth..."

          $args = @(
              "/SourcePath:`"$ispacPath`"",
              "/DestinationServer:`"$env:DB_SERVER`"",
              "/DestinationPath:`"/SSISDB/TimesheetDeployedPackages/ProjectPackages`""
          )

          $processInfo = New-Object System.Diagnostics.ProcessStartInfo
          $processInfo.FileName = $wizardPath
          $processInfo.Arguments = $args -join ' '
          $processInfo.RedirectStandardOutput = $true
          $processInfo.RedirectStandardError = $true
          $processInfo.UseShellExecute = $false

          $process = New-Object System.Diagnostics.Process
          $process.StartInfo = $processInfo
          $process.Start() | Out-Null

          $stdOut = $process.StandardOutput.ReadToEnd()
          $stdErr = $process.StandardError.ReadToEnd()
          $process.WaitForExit()

          # Write outputs to files
          $stdOut | Out-File -FilePath $stdoutLog -Encoding utf8
          $stdErr | Out-File -FilePath $stderrLog -Encoding utf8

          # Write outputs to console
          Write-Host "===== ISDeploymentWizard STDOUT ====="
          Write-Host $stdOut

          Write-Host "===== ISDeploymentWizard STDERR ====="
          Write-Host $stdErr

          if ($process.ExitCode -ne 0) {
              Write-Error "SSIS deployment failed with exit code $($process.ExitCode). See logs for details."
              exit $process.ExitCode
          }

          Write-Host "SSIS project deployed successfully."
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}

  deploy-sql-agent-jobs:
    needs: deploy-ssis-project
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy SQL Server Agent Jobs
        shell: powershell
        run: |
          Write-Host "Starting SQL Server Agent jobs deployment..."
          $template = "sql/JobScript.sql"
          $outdir = "temp-jobs"
          New-Item -ItemType Directory -Force -Path $outdir | Out-Null

          $packages = sqlcmd -S "$env:DB_SERVER" -E -Q "SELECT name FROM SSISDB.catalog.packages WHERE project_id IN (SELECT project_id FROM SSISDB.catalog.folders WHERE name = 'TimesheetDeployedPackages') AND name NOT IN ('TimesheetPa', 'TimesheetStaging1')" -h -1 -W

          foreach ($pkg in $packages.Trim().Split("`n") | Where-Object { $_ }) {
              $name = $pkg.Trim()
              $sqlFile = Join-Path $outdir "$name.sql"
              $content = (Get-Content -Raw $template) -replace '@jobName', $name -replace 'LAPTOP-ATT0UPK9', $env:DB_SERVER
              $content | Out-File -Encoding utf8 -NoNewline $sqlFile
              Write-Host "Deploying job: $name"
              $cmd = "sqlcmd -S `"$env:DB_SERVER`" -E -i `"$sqlFile`""
              Invoke-Expression $cmd
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Failed to deploy job: $name"
                  exit 1
              }
          }

          Write-Host "All SQL Server Agent jobs deployed."
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
