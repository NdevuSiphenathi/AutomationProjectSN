name: SSIS and Agent Job Deployment

on:
  workflow_call:

jobs:
  deploy-ssis-project:
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Directory Contents
        shell: powershell
        run: |
          Write-Host "Listing current directory contents:"
          Get-ChildItem -Recurse

      - name: Create SSIS Catalog
        shell: powershell
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SSISDB_CATALOG_PASSWORD: ${{ secrets.SSISDB_CATALOG_PASSWORD }}
        run: |
          Write-Host "Checking and creating SSIS Catalog..."

          $createCatalogSql = @"
          IF NOT EXISTS (SELECT name FROM master.sys.databases WHERE name = 'SSISDB')
          BEGIN
              CREATE DATABASE SSISDB;
          END
          IF NOT EXISTS (SELECT * FROM SSISDB.sys.schemas WHERE name = 'catalog')
          BEGIN
              EXEC SSISDB.catalog.create_catalog @password = N'$env:SSISDB_CATALOG_PASSWORD';
          END
          "@

          $sqlFile = ".\create_ssisdb.sql"
          $createCatalogSql | Out-File -FilePath $sqlFile -Encoding UTF8

          # Uncomment to use SQL Auth, else integrated auth
          # if ($env:DB_USER -and $env:DB_PASSWORD) {
          #   $cmd = "sqlcmd -S `"$env:DB_SERVER`" -U `"$env:DB_USER`" -P `"$env:DB_PASSWORD`" -i `"$sqlFile`" -o .\ssisdb_create.log"
          # } else {
          $cmd = "sqlcmd -S `"$env:DB_SERVER`" -E -i `"$sqlFile`" -o .\ssisdb_create.log"
          # }

          Invoke-Expression $cmd

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to create/check SSIS Catalog. See ssisdb_create.log"
            Get-Content .\ssisdb_create.log | Write-Error
            exit 1
          }
          Write-Host "SSIS Catalog creation/check completed."
          Get-Content .\ssisdb_create.log | Write-Host

      - name: Deploy SSIS Project (.ispac)
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
        shell: powershell
        run: |
          Write-Host "Starting SSIS project deployment..."

          $ispacPath = "ProjectPackages\ProjectPackages\bin\Development\ProjectPackages.ispac"
          $wizardPath = "C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"
          $stdoutLog = ".\ssisdeploy_output.log"
          $stderrLog = ".\ssisdeploy_error.log"
          $connectLog = ".\ssisconnect_test.log"

          if (-not (Test-Path $ispacPath)) {
            Write-Error "ISPAC file not found at: $ispacPath"
            exit 1
          }

          if (-not (Test-Path $wizardPath)) {
            Write-Error "ISDeploymentWizard.exe not found at: $wizardPath"
            exit 1
          }

          Write-Host "Testing SQL Server connectivity (Integrated Authentication)..."
          $sqlcmd = "sqlcmd -S `"$env:DB_SERVER`" -E -Q `"SELECT @@VERSION`" -o $connectLog"
          Invoke-Expression $sqlcmd
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Connectivity test failed. See $connectLog"
            Get-Content $connectLog | Write-Error
            exit 1
          }
          Write-Host "Connectivity test succeeded."
          Get-Content $connectLog | Write-Host

          function Deploy-SSISProject {
            param ([string[]]$Arguments)

            Write-Host "Running ISDeploymentWizard with arguments:"
            $Arguments | ForEach-Object { Write-Host "`t$_" }

            $process = Start-Process -FilePath $wizardPath -ArgumentList $Arguments -Wait -NoNewWindow -PassThru -RedirectStandardOutput $stdoutLog -RedirectStandardError $stderrLog
            $exitCode = $process.ExitCode

            Write-Host "===== STDOUT ====="
            if (Test-Path $stdoutLog) { Get-Content $stdoutLog | Write-Host } else { Write-Host "<No stdout log found>" }
            Write-Host "===== STDERR ====="
            if (Test-Path $stderrLog) { Get-Content $stderrLog | Write-Host } else { Write-Host "<No stderr log found>" }

            return $exitCode
          }

          $args = @(
            "/Silent",
            "/SourcePath:$ispacPath",
            "/DestinationServer:$env:DB_SERVER",
            "/DestinationPath:/SSISDB/TimesheetDeployedPackages/ProjectPackages"
          )

          $exitCode = Deploy-SSISProject -Arguments $args

          if ($exitCode -ne 0) {
            Write-Error "Deployment failed with exit code $exitCode."
            exit $exitCode
          }

          Write-Host "Verifying deployment in catalog..."
          $verifySql = "SELECT name FROM SSISDB.catalog.projects WHERE folder_name = 'TimesheetDeployedPackages' AND name = 'ProjectPackages'"
          $verifyCmd = "sqlcmd -S `"$env:DB_SERVER`" -E -Q `"$verifySql`" -o .\deployment_verify.log"
          Invoke-Expression $verifyCmd
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Deployment verification failed. Check deployment_verify.log"
            Get-Content .\deployment_verify.log | Write-Warning
            exit 1
          }
          Write-Host "Deployment verification succeeded."
          Get-Content .\deployment_verify.log | Write-Host

  deploy-sql-agent-jobs:
    needs: deploy-ssis-project
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy SQL Server Agent Jobs
        shell: powershell
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
        run: |
          Write-Host "Starting SQL Server Agent jobs deployment..."
          $template = "sql/JobScript.sql"
          $outdir = "temp-jobs"
          if (-Not (Test-Path $outdir)) { New-Item -ItemType Directory -Force -Path $outdir | Out-Null }

          $query = @"
          SELECT name
          FROM SSISDB.catalog.packages
          WHERE project_id IN (
            SELECT project_id FROM SSISDB.catalog.projects WHERE folder_name = 'TimesheetDeployedPackages'
          )
          AND name NOT IN ('TimesheetPa', 'TimesheetStaging1')
          "@

          $packagesRaw = sqlcmd -S "$env:DB_SERVER" -E -Q $query -h -1 -W
          $packages = $packagesRaw -split "\r?\n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }

          foreach ($pkg in $packages) {
            $jobName = $pkg
            $sqlFile = Join-Path $outdir "$jobName.sql"
            $content = (Get-Content -Raw $template) -replace '@jobName', $jobName -replace 'LAPTOP-ATT0UPK9', $env:DB_SERVER
            $content | Out-File -Encoding utf8 -NoNewline $sqlFile

            Write-Host "Deploying job: $jobName"
            $cmd = "sqlcmd -S `"$env:DB_SERVER`" -E -i `"$sqlFile`""
            Invoke-Expression $cmd
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to deploy job: $jobName"
              exit 1
            }
          }

          Write-Host "All SQL Server Agent jobs deployed."
