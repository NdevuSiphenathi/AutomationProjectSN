name: Deploy SSIS Project

on:
  workflow_dispatch:

jobs:
  deploy-ssis-project:
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List Directory Contents
        shell: powershell
        run: |
          Write-Host "Listing current directory contents:"
          Get-ChildItem -Recurse

      - name: Deploy SSIS Project (.ispac)
        env:
          DB_SERVER: ${{ secrets.DB_SERVER }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        shell: powershell
        run: |
          Write-Host "Starting SSIS project deployment..."

          # Use the correct .ispac path based on directory structure
          $ispacPath = "ProjectPackages.ispac"
          $wizardPath = "C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe"
          $stdoutLog = ".\ssisdeploy_output.log"
          $stderrLog = ".\ssisdeploy_error.log"
          $connectLog = ".\ssisconnect_test.log"

          Write-Host "Validating ISPAC file path: $ispacPath"
          if (-not (Test-Path $ispacPath)) {
              Write-Error "ISPAC file not found at: $ispacPath"
              Get-ChildItem -Recurse | Out-String | Write-Host  # Debug: List all files
              exit 1
          }

          Write-Host "Validating ISDeploymentWizard.exe path: $wizardPath"
          if (-not (Test-Path $wizardPath)) {
              Write-Error "ISDeploymentWizard.exe not found at: $wizardPath"
              exit 1
          }

          # Test SQL Server connectivity
          Write-Host "Testing Windows Authentication connectivity..."
          try {
              $sqlcmd = "sqlcmd -S `"$env:DB_SERVER`" -E -Q `"SELECT @@VERSION`" -o $connectLog"
              Invoke-Expression $sqlcmd
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "Windows Authentication connectivity test succeeded."
                  Get-Content $connectLog | Write-Host
              } else {
                  Write-Warning "Windows Authentication connectivity test failed."
                  Get-Content $connectLog | Write-Warning
                  exit 1
              }
          } catch {
              Write-Error "Error testing Windows Authentication: $_"
              exit 1
          }

          function Deploy-SSISProject {
              param (
                  [string[]]$Arguments
              )

              Write-Host "Running ISDeploymentWizard with arguments:"
              foreach ($arg in $Arguments) {
                  Write-Host "`t$arg"
              }

              # Run with silent mode and capture output
              $process = Start-Process -FilePath $wizardPath -ArgumentList $Arguments -NoNewWindow -PassThru -Wait -RedirectStandardOutput $stdoutLog -RedirectStandardError $stderrLog
              $exitCode = $process.ExitCode

              Write-Host "===== STDOUT ====="
              if (Test-Path $stdoutLog) {
                  Get-Content $stdoutLog | Write-Host
              } else {
                  Write-Host "<No stdout log found>"
              }

              Write-Host "===== STDERR ====="
              if (Test-Path $stderrLog) {
                  Get-Content $stderrLog | Write-Host
              } else {
                  Write-Host "<No stderr log found>"
              }

              return $exitCode
          }

          # Deploy with Windows Authentication and silent mode
          $winAuthArgs = @(
              "/SourcePath:`"$ispacPath`"",
              "/DestinationServer:`"$env:DB_SERVER`"",
              "/DestinationPath:`"/SSISDB/TimesheetDeployedPackages/ProjectPackages`"",
              "/Silent"
          )

          $exitCode = Deploy-SSISProject -Arguments $winAuthArgs

          if ($exitCode -ne 0) {
              Write-Error "Deployment failed with exit code $exitCode."
              exit $exitCode
          }

          # Validate deployment
          Write-Host "Validating deployment in SSISDB..."
          $validateCmd = "sqlcmd -S `"$env:DB_SERVER`" -E -Q `"SELECT name FROM SSISDB.catalog.projects WHERE name = 'ProjectPackages' AND folder_name = 'TimesheetDeployedPackages'`" -o $connectLog"
          Invoke-Expression $validateCmd
          if ($LASTEXITCODE -eq 0 -and (Get-Content $connectLog | Select-String "ProjectPackages")) {
              Write-Host "Deployment validation succeeded: ProjectPackages found in SSISDB."
          } else {
              Write-Warning "Deployment validation failed: ProjectPackages not found in SSISDB."
              Get-Content $connectLog | Write-Warning
              exit 1
          }

          Write-Host "SSIS project deployed successfully."
          exit 0
