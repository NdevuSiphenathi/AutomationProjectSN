name: Multi-Environment SQL Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'sql/**'

jobs:
  deploy-dev:
    name: Deploy to Development (Local)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Confirm checkout
        run: |
          echo "Step 1: Checked out the repository containing setup.sql"
      - name: Install sqlcmd
        run: |
          echo "Step 2: Installing sqlcmd on Ubuntu"
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo "/opt/mssql-tools/bin" >> $GITHUB_PATH
          echo "sqlcmd version: $(sqlcmd -? | grep Version)"
      - name: Deploy to Development
        env:
          SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}  
          SQL_USER: Auto_user
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 3: Deploying to Development ($SQL_SERVER):"
          echo "  - Creating AutoTest_SN27.db"
          echo "  - Setting up user table and data"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -i sql/setup.sql -l 60
          echo "Step 3 completed: Development deployment successful"
      - name: Verify Development
        env:
          SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}
          SQL_USER: Auto_user
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        run: |
          echo "Step 4: Verifying Development deployment"
          ROW_COUNT=$(sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -Q "SELECT COUNT(*) FROM AutoTestSiphenathi.dbo.user" -l 60 -h -1 | grep -o '[0-9]\+')
          if [ "$ROW_COUNT" -eq 2 ]; then
            echo "Verification successful: Expected number of rows (2) found in user table."
          else
            echo "Verification failed: Expected 2 rows, but found $ROW_COUNT rows."
            exit 1
          fi

  deploy-prod:
    name: Deploy to Production (Partner)
    runs-on: ubuntu-latest
    needs: deploy-dev  # Runs after dev deployment
    environment: production  # Requires approval
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install sqlcmd
        run: |
          echo "Step 1: Installing sqlcmd on Ubuntu"
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo "/opt/mssql-tools/bin" >> $GITHUB_PATH
      - name: Deploy to Production
        env:
          SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}  # Partner’s tunnel address
          SQL_USER: Auto_user
          SQL_PASSWORD: ${{ secrets.PROD_SQL_PASSWORD }}  # Partner’s password, if different
        run: |
          echo "Step 2: Deploying to Production ($SQL_SERVER):"
          echo "  - Creating AutoDBSiphenathi.db"
          echo "  - Setting up user table and data"
          sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -i sql/setup.sql -l 60
          echo "Step 2 completed: Production deployment successful"
      - name: Verify Production
        env:
          SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}
          SQL_USER: Auto_user
          SQL_PASSWORD: ${{ secrets.PROD_SQL_PASSWORD }}
        run: |
          echo "Step 3: Verifying Production deployment"
          ROW_COUNT=$(sqlcmd -S "$SQL_SERVER" -U "$SQL_USER" -P "$SQL_PASSWORD" -Q "SELECT COUNT(*) FROM AutoTestSiphenathi.dbo.user" -l 60 -h -1 | grep -o '[0-9]\+')
          if [ "$ROW_COUNT" -eq 2 ]; then
            echo "Verification successful: Expected number of rows (2) found in user table."
          else
            echo "Verification failed: Expected 2 rows, but found $ROW_COUNT rows."
            exit 1
          fi
